When would you want to use a remote repository rather than keeping all your work local?

Whenever i am working on a collaboratif project. Where all the 
team could interact with the files.
To create a new repo in GitHub, we have to follow the next
steps:
1. Create a remote:  git remote add origin URL
2. Push the commits: git push origin master
To add collaborators on github:
Go to the settings in the repo, then collaborator, add.

Why might you want to always pull changes manually rather than
having Git automatically stay up-to-date with your remote
repository?

Whenever a collaborator is working on the same file than i do is a good
idea to do it manually, because it could cause conflicts or confusion
while working on the project.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Clone generates the same content from a repository into another 
directory. This could be local or from GitHub to Local.
Forke clones from GitHub to GitHub.
Branch could be local or in GitHub. It's goal is to work in a parallel process from a commit. 

COLLABORATORS:
Conflict.
This happen when the local mster and the master on github
have added a new commit, the we should merge both commits.
If the changes are in the same part of code, then there will
bw a conflict.

Git fetch update the origin/master branch with the content of
the master branch of github.
Thats why git pull is equivalent to git getch + git merge.

Fast forward merges don't create a 2 commits because it considers
that one commit is the ancestor (reachable) of one another.
In the case of git pull, the ancestor or common branch is the
origin/master.

What is the benefit of having a copy of the last known state of the remote stored locally?

We can work off line without merging the changes from github.
So Fetch is a good option. We can know the state of the last
common commit between github and local directory.

PULL REQUEST.
-Create a new branch.
-Modify the file(s).
-Create a commit.
-Push the new branch into the remote.
-Create a pull request on GitHub.

**TO DELETE A BRANCH
git branch -d "branch_name"

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

I would collaborate usin a different control version tool as drive or dropbox.
With drive is much more easy if we're working on the same file, so google
drive or office online is a good option. During the course "inversion projects",
i worked using online excel and it was super dynamic and easy to get and give
the needed results to solve some problems.

GitHub is a perfect tool talking about code projects. Because we can have different
longtime versions of the same file. 

To resolve pull request conflicts:
-Merge on github one of the pull request.
-Pull it to local, so that origin/master has the same
	state as the local master:
	Alternative:
	git fetch origin master
	git merge origin/master master

-Checkout diff-oil branch
-Merge master into the different-oil branch.
	git merge different-oil master
-Push the branche into the remote.
-Pull to stay up to date.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

When 2 collaborators are working in the same file, or we want the specific authorization
from a collaborator to update the master branch, it's a good idea to create pull request
through branches, so that we can avoid conflict problems.

You could make your changes directly to the master branch in
your fork, but when contributing to a public repository, itâ€™s
standard practice to make the changes in a non-master branch
within the fork. This way, you can easily keep your master
branch up-to-date with master of the original repository, and
merge changes from master into your branch when you are ready.