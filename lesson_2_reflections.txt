What happens when you initialize a repository? Why do you need to do it?

A hidden folder called .git is created, this is the repository, we can visualize it with ls -a. 
This Folder will contain specific files from git. 
We use the command git init. We need it to create our commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

In the working repository we can find the current version files.
In the repository we can find the commits so that we can check the old ones.
Staging area allow us to select a bunch of files to update in the same commit.
If we added accidenttally a file to the satging area, we can remove it with git reset.

How can you use the staging area to make sure you have one commit per logical change?

we can compare the staging area with the commit1 form the repository. Using the command git diff --staged.
If we want to compare de staging area with the working repository, we should use the command git diff.
IMPORTANT!!! Use git checkout master to return to the last version.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When creating a new version of the project (Beta, Language translation, easy mode version, etc.)
To create a new branche we use the command git branch "branchname".
To switch between branches: git checkout branchname.
To see the available branches just: git branch.

In general, it’s very common that if you make a branch, either an experimental branch or to work on a new feature, you want to periodically merge master into that branch. This is because master usually contains the official version of the code, and it’s common to want experimental changes to include all of the changes to master.


How do the diagrams help you visualize the branch structure?

Diagrams help us to see what commits are in some branches, so we can see if a commit is reachable or not.
git log --graph --oneline branch1 branch2
**The deatached head message refers to when we checked ot a commit and we work on it, so that when we come back
and check out to the master branch we won't be able to reach the commits on whiche we were working. Because
of this is important to create a brnach. Commonly: git checkout -b new_branch_name

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The merging process add and remove the code as it was modified.
Is an excellent option if 2 or more colleagues are working on
independent tasks but that should work in the same code.
We represent them in the diagram to see the parents of the commits.
If we just run git log, we will see the commits by time order, not by sequential process.

!!!A note about git merge

git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.!!!!
*
Comparing a commit to its parent
The command Caroline mentions to compare a commit to its parent is git show commit_id

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Pros: It joins the code easily
		When it cannot, it tells you about it
Crons: We should take a couple of minutes to see the changes that were made.

